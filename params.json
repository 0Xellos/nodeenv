{"name":"Nodeenv","tagline":"Node.js virtual environment (sandbox) builder","body":"### nodeenv\r\n``nodeenv`` (node.js virtual environment) is a tool to create \r\nisolated node.js environments.\r\n\r\nIt creates an environment that has its own installation directories, \r\nthat doesn't share libraries with other node.js virtual environments.\r\n\r\nAlso new environment can be integrated with environment which was built\r\nby [virtualenv](https://github.com/pypa/virtualenv) (python).\r\n\r\n\r\n### Install\r\n\r\n#### Global installation\r\n\r\nYou can install nodeenv with [easy_install](http://pypi.python.org/pypi/setuptools):\r\n\r\n    $ sudo easy_install nodeenv\r\n\r\nor [pip](http://pypi.python.org/pypi/pip):\r\n\r\n    $ sudo pip install nodeenv\r\n\r\n#### Local installation\r\n\r\nIf you're using [virtualenv](https://github.com/pypa/virtualenv) then you can install nodeenv via\r\n``pip``/``easy_install`` inside any virtual environment built with virtualenv::\r\n\r\n    $ virtualenv env\r\n    $ . env/bin/activate\r\n    (env) $ pip install nodeenv\r\n    (env) $ nodeenv --version\r\n    0.6.5\r\n\r\nIf you want to work with the latest version of the nodeenv you can \r\ninstall it from the github [repository](https://github.com/ekalinin/nodeenv):\r\n\r\n    $ git clone https://github.com/ekalinin/nodeenv.git\r\n    $ ./nodeenv/nodeenv.py --help\r\n\r\nOr you can just download raw nodeenv.py and use it::\r\n\r\n    $ wget https://raw.github.com/ekalinin/nodeenv/master/nodeenv.py\r\n    $ python nodeenv.py --version\r\n    0.6.5\r\n\r\n### Usage\r\nInstall new environment:\r\n\r\n    $ nodeenv env\r\n\r\nActivate new environment:\r\n\r\n    $ . env/bin/activate\r\n\r\nChek versions of main packages:\r\n\r\n    (env) $ node -v\r\n    v0.4.6\r\n\r\n    (env) $ npm -v\r\n    0.3.18\r\n\r\nDeactivate environment:\r\n\r\n    (env) $ deactivate_node\r\n\r\nSaving into the file versions of all installed packages:\r\n\r\n    $ . env/bin/activate\r\n    (env) $ npm install -g express\r\n    (env) $ npm install -g jade\r\n    (env) $ freeze ../prod-requirements.txt\r\n\r\nCreate environment copy from requirement file:\r\n\r\n    $ nodeenv --requirement=../prod-requirements.txt --jobs=4 env-copy\r\n\r\nRequirements files are plain text files that contain a list of packages \r\nto be installed. These text files allow you to create repeatable installations.\r\nRequirements file example:\r\n\r\n    $ cat ../prod-requirements.txt\r\n    connect@1.3.0\r\n    express@2.2.2\r\n    jade@0.10.4\r\n    mime@1.2.1\r\n    npm@0.3.17\r\n    qs@0.0.7\r\n\r\nIf you're already have python virtualenv tool, and want to use nodeenv and\r\nvirtualenv in conjunction, then you should create (or activate) python virtual\r\nenvironment:\r\n\r\n    # in case of using virtualenv_wrapper\r\n    $ mkvirtualenv my_env\r\n\r\n    # in cace of using virtualenv\r\n    $ . my_env/bin/activate\r\n\r\nand add node virtual environment to this existing new_venv:\r\n\r\n    (my_env) $ nodeenv -p\r\n\r\nThat's all. Now, all your node.js modules will be installed into your virtual\r\nenvironment:\r\n\r\n    $ workon my_env\r\n    (my_env) $ npm install -g coffee-script\r\n    (my_env) $ which coffee\r\n    /home/User/virtualenvs/my_env/bin/coffee","google":"UA-9001714-5","note":"Don't delete this file! It's used internally to help with page regeneration."}